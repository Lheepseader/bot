package com.pandev.bot.service;

import com.pandev.bot.entity.Category;
import com.pandev.bot.exception.IncorrectInputException;
import com.pandev.bot.repository.CategoryRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.
 */
@Service
@RequiredArgsConstructor
public class CategoryServiceI implements CategoryService {

    private final CategoryRepository categoryRepository;

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–∏—Å—Ç–µ–º—É.
     * –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–¥–µ—Ç –¥–æ—á–µ—Ä–Ω–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     *
     * @param categoryName       –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param categoryParentName –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
     * @return —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
     * @throws IncorrectInputException –µ—Å–ª–∏ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
     *                                 –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     */
    @Override
    public String addCategory(String categoryName, String categoryParentName) throws IncorrectInputException {
        if (categoryName.isBlank()) {
            throw new IncorrectInputException("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª.");
        } else {
            if (categoryRepository.existsByName(categoryName)) {
                throw new IncorrectInputException("–ö–∞—Ç–µ–≥–æ—Ä–∏—è \"" + categoryName + "\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
            }
            Category category = new Category();
            category.setName(categoryName);
            if (!categoryParentName.isBlank()) {
                Category parent = categoryRepository.findByName(categoryParentName)
                        .orElseThrow(() -> new IncorrectInputException("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ \"" + categoryParentName + "\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"));
                category.setParent(parent);
            }
            categoryRepository.save(category);
        }
        return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è \"" + categoryName + "\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.";
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
     *
     * @return —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–µ—Ä–µ–≤–æ –ø—É—Å—Ç–æ
     */
    @Override
    public String buildCategoryTree() {
        List<Category> rootCategories = categoryRepository.findByParentIsNull();

        if (rootCategories.isEmpty()) {
            return "–î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç–æ.";
        }

        StringBuilder treeBuilder = new StringBuilder();
        for (Category root : rootCategories) {
            buildTreeRecursive(root, treeBuilder, 0);
        }

        return treeBuilder.toString();
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏, –≤–∫–ª—é—á–∞—è –≤—Å–µ –µ—ë –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     *
     * @param categoryName –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @return —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
     * @throws IncorrectInputException –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     */
    @Override
    public String removeCategory(String categoryName) {
        Optional<Category> optionalCategory = categoryRepository.findByName(categoryName);
        if (optionalCategory.isEmpty()) {
            throw new IncorrectInputException("–ö–∞—Ç–µ–≥–æ—Ä–∏—è \"" + categoryName + "\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
        }

        Category category = optionalCategory.get();

        categoryRepository.delete(category);
        return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è \"" + categoryName + "\" –∏ –µ—ë –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã.";
    }

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
     *
     * @param category    —Ç–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     * @param treeBuilder —Å—Ç—Ä–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
     * @param depth       —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    private void buildTreeRecursive(Category category, StringBuilder treeBuilder, int depth) {
        treeBuilder.append("  ".repeat(depth))
                .append("üîπ ")
                .append(category.getName())
                .append("\n");

        List<Category> children = categoryRepository.findByParent(category);
        for (Category child : children) {
            buildTreeRecursive(child, treeBuilder, depth + 1);
        }
    }
}

